Voy a generar los códigos completos con todas las mejoras prioritarias que mencionamos, integradas de manera cohesiva. Aquí tienes los tres archivos completamente actualizados:

### 1. HTML Completo (index.html)
```html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>App NANGMI - Gestión de Proyectos</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Interfaz login -->
    <section id="loginSection" class="login-container animate__animated animate__fadeIn">
        <div class="login-box">
            <div class="login-header">
                <img src="assets/logo.jpeg" alt="Logo" class="logo animate__animated animate__bounceIn">
                <h2>Iniciar sesión</h2>
            </div>
            <form id="loginForm">
                <input type="email" id="loginEmail" placeholder="Correo electrónico" required>
                <input type="password" id="loginPassword" placeholder="Contraseña" required>
                <button type="submit" class="animate__animated animate__pulse">Iniciar sesión</button>
            </form>
            <div class="new-user">
                <p>¿No tienes cuenta?</p>
                <button id="registerBtn">Crear cuenta</button>
            </div>
        </div>
    </section>

    <!-- Interfaz Carga Presupuesto -->
    <section id="presupuestoSection" class="container">
        <header class="top-bar">
            <div class="logo-container">
                <img src="assets/logo.jpeg" alt="Logo" class="logo">
                <span>Cargar presupuesto</span>
            </div>
            <div class="user-menu">
                <button class="menu-button" id="userBtn"><i class="fas fa-user-circle"></i></button>
                <div id="dropdownMenu" class="dropdown">
                    <a href="#" id="analisisLink"><i class="fas fa-chart-bar"></i> Análisis</a>
                    <a href="#" id="reportesLink"><i class="fas fa-file-alt"></i> Reportes</a>
                    <a href="#" id="logoutLink"><i class="fas fa-sign-out-alt"></i> Cerrar sesión</a>
                </div>
            </div>
        </header>

        <main class="content">
            <h1 class="animate__animated animate__fadeInDown">Cargar presupuesto</h1>
            <div class="dashboard-kpis animate__animated animate__fadeIn">
                <div class="kpi-card">
                    <h6>PROYECTOS ACTIVOS</h6>
                    <h2 id="activeProjects">3</h2>
                </div>
                <div class="kpi-card">
                    <h6>ÚLTIMA ACTUALIZACIÓN</h6>
                    <h2 id="lastUpdate">Hoy</h2>
                </div>
            </div>
            
            <div class="button-group animate__animated animate__fadeInUp">
                <button class="download-btn" id="downloadTemplate">
                    <i class="fas fa-download"></i> Descargar plantilla
                </button>
                <label for="excelInput" class="upload-btn">
                    <i class="fas fa-upload"></i> Subir archivo Excel
                </label>
                <input type="file" id="excelInput" accept=".xlsx,.xls" hidden>
                <button class="google-btn" id="googleSheetsBtn">
                    <i class="fab fa-google"></i> Conectar Google Sheets
                </button>
            </div>
            <button class="generate-btn animate__animated animate__pulse animate__infinite" id="generateAnalysisFromSheets">
                <i class="fas fa-magic"></i> Generar análisis
            </button>
        </main>

        <!-- Modal para Excel -->
        <div id="excelModal" class="modal">
            <div class="modal-content animate__animated animate__zoomIn">
                <span class="close" id="closeModal">&times;</span>
                <div id="excelPreview" class="excel-preview"></div>
                <button class="generate-btn" id="generateAnalysis">
                    <i class="fas fa-chart-line"></i> Generar análisis
                </button>
            </div>
        </div>
    </section>

    <!-- Interfaz Analysis -->
    <section id="analisisSection" class="container analysis-section">
        <header class="top-bar">
            <div class="logo-container">
                <img src="assets/logo.jpeg" alt="Logo" class="logo small-logo">
                <span>Análisis de desviaciones</span>
            </div>
            <div class="user-menu">
                <button class="menu-button" id="userBtnAnalisis"><i class="fas fa-user-circle"></i></button>
                <div id="dropdownMenuAnalisis" class="dropdown">
                    <a href="#" id="presupuestoLink"><i class="fas fa-file-import"></i> Presupuesto</a>
                    <a href="#" id="reportesLinkAnalisis"><i class="fas fa-file-alt"></i> Reportes</a>
                    <a href="#" id="logoutLinkAnalisis"><i class="fas fa-sign-out-alt"></i> Cerrar sesión</a>
                </div>
            </div>
        </header>

        <main class="analysis-content">
            <h1 class="animate__animated animate__fadeIn">Análisis de desviaciones de costos</h1>
            
            <div class="table-container animate__animated animate__fadeInUp">
                <table id="analisisTable">
                    <thead>
                        <tr>
                            <th>Ítems de costos</th>
                            <th>Planificado</th>
                            <th>Real</th>
                            <th>Desviación</th>
                            <th>Sobrecosto</th>
                            <th>Causa</th>
                            <th>Recomendación</th>
                        </tr>
                    </thead>
                    <tbody id="analisisTableBody"></tbody>
                </table>
            </div>
            
            <div id="alertBox" class="alert-box animate__animated animate__fadeIn">
                <h3><i class="fas fa-exclamation-triangle"></i> Alertas:</h3>
                <ul id="alertList"></ul>
            </div>
            
            <div class="analisis-footer animate__animated animate__fadeInUp">
                <div class="collaboration-notice">
                    <i class="fas fa-users"></i> <span id="collaborators">1 usuario activo</span>
                </div>
                <button id="refreshDataBtn" class="refresh-btn">
                    <i class="fas fa-sync-alt"></i> Actualizar Datos
                </button>
            </div>
        </main>
        
        <button id="backBtn" class="back-btn animate__animated animate__fadeInLeft">
            <i class="fas fa-arrow-left"></i> Volver
        </button>
        <button id="generateReportBtn" class="floating-btn animate__animated animate__pulse">
            <i class="fas fa-file-pdf"></i> Generar Reporte
        </button>
    </section>

    <!-- Interfaz Reportes -->
    <section id="reportesSection" class="container reports-section">
        <header class="top-bar">
            <div class="logo-container">
                <img src="assets/logo.jpeg" alt="Logo" class="logo small-logo">
                <span>Generación de Reportes</span>
            </div>
            <div class="user-menu">
                <button class="menu-button" id="userBtnReportes"><i class="fas fa-user-circle"></i></button>
                <div id="dropdownMenuReportes" class="dropdown">
                    <a href="#" id="presupuestoLinkReportes"><i class="fas fa-file-import"></i> Presupuesto</a>
                    <a href="#" id="analisisLinkReportes"><i class="fas fa-chart-bar"></i> Análisis</a>
                    <a href="#" id="logoutLinkReportes"><i class="fas fa-sign-out-alt"></i> Cerrar sesión</a>
                </div>
            </div>
        </header>

        <main class="reportes-content">
            <div class="about-section animate__animated animate__fadeIn">
                <h1>Generación de Reportes</h1>
                <div class="tabs">
                    <button class="tab-button active" data-tab="mision">Misión</button>
                    <button class="tab-button" data-tab="vision">Visión</button>
                    <button class="tab-button" data-tab="equipo">Equipo</button>
                </div>
                
                <div class="tab-content active" id="mision">
                    <p>Optimizar la gestión de proyectos mediante análisis de costos en tiempo real.</p>
                </div>
                <div class="tab-content" id="vision">
                    <p>Ser el sistema líder en control presupuestario para proyectos de construcción.</p>
                </div>
                <div class="tab-content" id="equipo">
                    <div class="team-member">
                        <img src="assets/avatar1.jpg" alt="Tu Nombre">
                        <h4>Tu Nombre</h4>
                        <p>Desarrollador Full-Stack</p>
                    </div>
                    <div class="team-member">
                        <img src="assets/avatar2.jpg" alt="Tu Amiga">
                        <h4>Tu Amiga</h4>
                        <p>Analista de Datos</p>
                    </div>
                </div>
            </div>
            
            <div class="chart-container animate__animated animate__fadeInUp">
                <h2><i class="fas fa-project-diagram"></i> Curva S de Avance</h2>
                <canvas id="sCurveChart"></canvas>
            </div>
            
            <div class="chart-container animate__animated animate__fadeInUp">
                <h2><i class="fas fa-chart-bar"></i> Comparación por Partida</h2>
                <canvas id="comparacionChart"></canvas>
            </div>
            
            <div class="reportes-actions animate__animated animate__fadeInUp">
                <button id="volverBtn" class="action-btn">
                    <i class="fas fa-arrow-left"></i> Volver
                </button>
                <button id="exportPdfBtn" class="action-btn">
                    <i class="fas fa-file-pdf"></i> Exportar como PDF
                </button>
                <button id="sendEmailBtn" class="action-btn">
                    <i class="fas fa-envelope"></i> Enviar por Email
                </button>
            </div>
        </main>
    </section>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-database-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js"></script>
    <script src="script.js"></script>
</body>
</html>
```

### 2. JavaScript Completo (script.js)
```javascript
// Configuración Firebase
const firebaseConfig = {
    apiKey: "TU_API_KEY",
    authDomain: "TU_PROYECTO.firebaseapp.com",
    databaseURL: "https://TU_PROYECTO.firebaseio.com",
    projectId: "TU_PROYECTO",
    storageBucket: "TU_PROYECTO.appspot.com",
    messagingSenderId: "TU_SENDER_ID",
    appId: "TU_APP_ID"
};

// Inicializar Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();
const auth = firebase.auth();

// Variables globales
let appData = {
    source: null,
    data: [],
    charts: {},
    usuario: null,
    proyectoActual: null
};

let sCurveChart = null;
let comparacionChart = null;
let intervaloActualizacion = null;

// Inicialización
document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
    setupFirebaseListeners();
    mostrarLogin();
});

// Configurar listeners de Firebase
function setupFirebaseListeners() {
    // Autenticación
    auth.onAuthStateChanged(user => {
        if (user) {
            appData.usuario = {
                uid: user.uid,
                email: user.email,
                nombre: user.displayName || user.email.split('@')[0]
            };
            cargarProyectosUsuario();
        } else {
            appData.usuario = null;
            mostrarLogin();
        }
    });

    // Escuchar cambios colaborativos
    database.ref('presencia').on('value', snapshot => {
        const usuarios = snapshot.numChildren();
        document.getElementById('collaborators').textContent = `${usuers} usuario(s) activo(s)`;
    });
}

// Configurar event listeners
function setupEventListeners() {
    // Login y Registro
    document.getElementById('loginForm')?.addEventListener('submit', handleLogin);
    document.getElementById('registerBtn')?.addEventListener('click', mostrarRegistro);

    // Menús desplegables
    const menuButtons = ['userBtn', 'menuBtn', 'userBtnAnalisis', 'menuBtnAnalisis', 'userBtnReportes', 'menuBtnReportes'];
    menuButtons.forEach(btn => {
        document.getElementById(btn)?.addEventListener('click', () => toggleDropdown(`dropdown${btn.replace('user', '').replace('menu', '')}`));
    });

    // Navegación
    const navLinks = [
        'analisisLink', 'reportesLink', 'logoutLink',
        'presupuestoLink', 'reportesLinkAnalisis', 'logoutLinkAnalisis',
        'presupuestoLinkReportes', 'analisisLinkReportes', 'logoutLinkReportes'
    ];
    navLinks.forEach(link => {
        document.getElementById(link)?.addEventListener('click', handleNavLink);
    });

    // Botones principales
    document.getElementById('backBtn')?.addEventListener('click', () => mostrarSeccion('presupuesto'));
    document.getElementById('volverBtn')?.addEventListener('click', () => mostrarSeccion('analisis'));
    document.getElementById('closeModal')?.addEventListener('click', cerrarModal);
    document.getElementById('generateAnalysis')?.addEventListener('click', generarAnalisis);
    document.getElementById('generateReportBtn')?.addEventListener('click', () => mostrarSeccion('reportes'));
    document.getElementById('exportPdfBtn')?.addEventListener('click', exportarPDF);
    document.getElementById('sendEmailBtn')?.addEventListener('click', enviarEmailReporte);
    document.getElementById('downloadTemplate')?.addEventListener('click', descargarPlantilla);
    document.getElementById('googleSheetsBtn')?.addEventListener('click', conectarGoogleSheets);
    document.getElementById('generateAnalysisFromSheets')?.addEventListener('click', cargarDatosDesdeSheets);
    document.getElementById('refreshDataBtn')?.addEventListener('click', actualizarDatos);
    document.getElementById('excelInput')?.addEventListener('change', handleFileUpload);

    // Pestañas institucionales
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.addEventListener('click', () => {
            const tabId = btn.getAttribute('data-tab');
            mostrarTab(tabId);
        });
    });
}

// Manejar login con Firebase
function handleLogin(e) {
    e.preventDefault();
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;

    auth.signInWithEmailAndPassword(email, password)
        .then(() => {
            mostrarNotificacion('Inicio de sesión exitoso');
            mostrarSeccion('presupuesto');
        })
        .catch(error => {
            mostrarNotificacion(error.message, true);
        });
}

// Manejar registro con Firebase
function handleRegister(e) {
    e.preventDefault();
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('registerConfirmPassword').value;

    if (password !== confirmPassword) {
        mostrarNotificacion('Las contraseñas no coinciden', true);
        return;
    }

    auth.createUserWithEmailAndPassword(email, password)
        .then(() => {
            mostrarNotificacion('Registro exitoso. Por favor inicia sesión');
            mostrarLogin();
        })
        .catch(error => {
            mostrarNotificacion(error.message, true);
        });
}

// Mostrar secciones
function mostrarSeccion(seccion) {
    ocularTodasSecciones();
    
    switch(seccion) {
        case 'login':
            document.getElementById('loginSection').style.display = 'flex';
            break;
        case 'presupuesto':
            document.getElementById('presupuestoSection').style.display = 'block';
            break;
        case 'analisis':
            document.getElementById('analisisSection').style.display = 'block';
            if (appData.data.length > 0) procesarDatosAnalisis(appData.data);
            break;
        case 'reportes':
            document.getElementById('reportesSection').style.display = 'block';
            if (!appData.charts.initialized && appData.data.length > 0) inicializarGraficos();
            break;
    }
}

// Procesar datos de análisis
function procesarDatosAnalisis(data) {
    const tbody = document.getElementById('analisisTableBody');
    const alertList = document.getElementById('alertList');
    
    tbody.innerHTML = '';
    alertList.innerHTML = '';
    
    data.forEach((row, index) => {
        if (index === 0 || !row.item) return;
        
        const planificado = parseFloat(row.planificado) || 0;
        const real = parseFloat(row.real) || 0;
        const desviacion = real - planificado;
        const porcentaje = planificado !== 0 ? (desviacion / planificado * 100).toFixed(1) : 0;
        const sobrecosto = desviacion > 0 ? desviacion : 0;
        
        const rowHTML = `
            <tr>
                <td>${row.item}</td>
                <td>${planificado.toLocaleString('es-PE', {style: 'currency', currency: 'PEN'})}</td>
                <td>${real.toLocaleString('es-PE', {style: 'currency', currency: 'PEN'})}</td>
                <td class="${desviacion >= 0 ? 'up' : 'down'}">
                    ${Math.abs(porcentaje)}% ${desviacion >= 0 ? '▲' : '▼'}
                </td>
                <td>${sobrecosto.toLocaleString('es-PE', {style: 'currency', currency: 'PEN'})}</td>
                <td>
                    <select class="cause-select">
                        <option value="">Seleccionar causa</option>
                        <option value="retraso">Retraso en entrega</option>
                        <option value="inflacion">Inflación de precios</option>
                        <option value="error">Error en estimación</option>
                    </select>
                </td>
                <td>
                    <input type="text" class="recommendation-input" placeholder="Ingrese recomendación">
                </td>
            </tr>
        `;
        tbody.innerHTML += rowHTML;
        
        if (Math.abs(porcentaje) > 10) {
            alertList.innerHTML += `
                <li>
                    <strong>${row.item}</strong>: ${porcentaje >= 0 ? '+' : ''}${porcentaje}%
                    (${desviacion.toLocaleString('es-PE', {style: 'currency', currency: 'PEN'})})
                </li>
            `;
        }
    });
    
    // Actualizar Firebase con los nuevos datos
    if (appData.proyectoActual) {
        database.ref(`proyectos/${appData.proyectoActual}`).update({
            data: data,
            lastUpdated: firebase.database.ServerValue.TIMESTAMP
        });
    }
}

// Inicializar gráficos
function inicializarGraficos() {
    // Destruir gráficos existentes
    if (sCurveChart) sCurveChart.destroy();
    if (comparacionChart) comparacionChart.destroy();
    
    // Datos para gráficos
    const meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun'];
    const items = appData.data.slice(1, 6).map(row => row.item);
    const planificado = appData.data.slice(1, 6).map(row => parseFloat(row.planificado) || 0);
    const real = appData.data.slice(1, 6).map(row => parseFloat(row.real) || 0);
    
    // Curva S
    sCurveChart = new Chart(
        document.getElementById('sCurveChart'),
        {
            type: 'line',
            data: {
                labels: meses,
                datasets: [
                    {
                        label: 'Planificado',
                        data: [10, 25, 50, 75, 90, 100],
                        borderColor: '#4e4376',
                        backgroundColor: 'rgba(78, 67, 118, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: 'Real',
                        data: [8, 20, 45, 60, 75, 82],
                        borderColor: '#2b5876',
                        backgroundColor: 'rgba(43, 88, 118, 0.1)',
                        tension: 0.4,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const label = context.dataset.label || '';
                                const value = context.parsed.y;
                                const desviacion = context.datasetIndex === 1 ? 
                                    value - context.chart.data.datasets[0].data[context.dataIndex] : 0;
                                return `${label}: ${value}% ${desviacion !== 0 ? `(Desv: ${desviacion > 0 ? '+' : ''}${desviacion}%)` : ''}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        min: 0,
                        max: 100,
                        title: {
                            display: true,
                            text: 'Porcentaje de Avance'
                        }
                    }
                }
            }
        }
    );
    
    // Gráfico de comparación
    comparacionChart = new Chart(
        document.getElementById('comparacionChart'),
        {
            type: 'bar',
            data: {
                labels: items,
                datasets: [
                    {
                        label: 'Planificado',
                        data: planificado,
                        backgroundColor: '#4e4376'
                    },
                    {
                        label: 'Real',
                        data: real,
                        backgroundColor: '#2b5876'
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const label = context.dataset.label || '';
                                const value = context.parsed.y.toLocaleString('es-PE', {style: 'currency', currency: 'PEN'});
                                const desviacion = context.datasetIndex === 1 ? 
                                    context.parsed.y - context.chart.data.datasets[0].data[context.dataIndex] : 0;
                                return `${label}: ${value} ${desviacion !== 0 ? `(Desv: ${desviacion > 0 ? '+' : ''}${desviacion.toLocaleString('es-PE', {style: 'currency', currency: 'PEN'})})` : ''}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Monto (PEN)'
                        }
                    }
                }
            }
        }
    );
    
    appData.charts.initialized = true;
}

// Exportar a PDF
function exportarPDF() {
    const element = document.getElementById('reportesSection');
    const buttons = document.querySelectorAll('.reportes-actions button');
    
    buttons.forEach(btn => btn.style.visibility = 'hidden');
    
    html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#FFFFFF'
    }).then(canvas => {
        const pdf = new jsPDF('p', 'mm', 'a4');
        const imgData = canvas.toDataURL('image/jpeg', 0.95);
        const pdfWidth = pdf.internal.pageSize.getWidth() - 20;
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
        
        pdf.addImage(imgData, 'JPEG', 10, 10, pdfWidth, pdfHeight);
        pdf.save(`reporte_${appData.proyectoActual || 'nanghi'}.pdf`);
    }).finally(() => {
        buttons.forEach(btn => btn.style.visibility = 'visible');
    });
}

// Enviar reporte por email
function enviarEmailReporte() {
    mostrarNotificacion('Preparando envío de reporte...');
    // Implementar integración con EmailJS o backend
}

// Resto de funciones auxiliares (toggleDropdown, mostrarNotificacion, etc.)
// ... (se mantienen similares pero actualizadas para usar Firebase)

// Inicializar presencia de usuario
function iniciarPresenciaUsuario() {
    const presenciaRef = database.ref(`presencia/${appData.usuario.uid}`);
    
    presenciaRef.onDisconnect().remove();
    presenciaRef.set({
        nombre: appData.usuario.nombre,
        email: appData.usuario.email,
        ultimaConexion: firebase.database.ServerValue.TIMESTAMP
    });
}

// Cargar proyectos del usuario
function cargarProyectosUsuario() {
    database.ref(`usuarios/${appData.usuario.uid}/proyectos`).once('value').then(snapshot => {
        const proyectos = snapshot.val() || [];
        // Actualizar UI con proyectos disponibles
    });
}
```

### 3. CSS Completo (styles.css)
```css
/* Estilos generales */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f5f5f5;
    color: #333;
    transition: background-color 0.3s;
}

/* Login */
.login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: linear-gradient(135deg, #2b5876 0%, #4e4376 100%);
}

.login-box {
    background: white;
    padding: 2rem;
    border-radius: 1rem;
    width: 100%;
    max-width: 400px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    transform: translateY(0);
    transition: transform 0.3s, box-shadow 0.3s;
}

.login-box:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.3);
}

.login-header {
    text-align: center;
    margin-bottom: 1.5rem;
}

.login-header .logo {
    width: 80px;
    margin-bottom: 1rem;
    transition: transform 0.3s;
}

.login-header .logo:hover {
    transform: rotate(15deg);
}

.login-box input {
    width: 100%;
    padding: 0.75rem 1rem;
    margin-bottom: 1rem;
    border: 1px solid #ddd;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.3s, box-shadow 0.3s;
}

.login-box input:focus {
    border-color: #4e4376;
    box-shadow: 0 0 0 3px rgba(78, 67, 118, 0.2);
    outline: none;
}

.login-box button {
    width: 100%;
    padding: 0.75rem;
    background: linear-gradient(to right, #4e4376, #2b5876);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s, opacity 0.3s;
}

.login-box button:hover {
    opacity: 0.9;
    transform: translateY(-2px);
}

.login-box button:active {
    transform: translateY(0);
}

.new-user {
    text-align: center;
    margin-top: 1.5rem;
    color: #666;
}

.new-user button {
    background: none;
    border: none;
    color: #4e4376;
    font-weight: 600;
    cursor: pointer;
    transition: color 0.3s;
}

.new-user button:hover {
    color: #2b5876;
}

/* Contenedores principales */
.container {
    display: none;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    min-height: 100vh;
    flex-direction: column;
    background-color: #fff;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
}

.top-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background: linear-gradient(to right, #2b5876, #4e4376);
    color: white;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.logo-container {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.logo {
    height: 40px;
    transition: transform 0.3s;
}

.logo:hover {
    transform: scale(1.1);
}

.small-logo {
    height: 30px;
}

.user-menu {
    display: flex;
    align-items: center;
    gap: 1rem;
    position: relative;
}

.menu-button {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    transition: transform 0.3s;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
}

.menu-button:hover {
    background-color: rgba(255,255,255,0.1);
    transform: rotate(90deg);
}

.dropdown {
    display: none;
    position: absolute;
    right: 0;
    top: 50px;
    background: white;
    border-radius: 0.5rem;
    min-width: 200px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    z-index: 1001;
    overflow: hidden;
}

.dropdown a {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: #333;
    transition: background-color 0.3s;
}

.dropdown a:hover {
    background-color: #f5f5f5;
}

.dropdown a i {
    width: 20px;
    text-align: center;
}

/* Contenido principal */
.content {
    padding: 2rem;
    max-width: 1000px;
    margin: 0 auto;
    width: 100%;
}

h1, h2, h3 {
    color: #2b5876;
    margin-bottom: 1.5rem;
}

h1 {
    font-size: 2rem;
    font-weight: 700;
}

h2 {
    font-size: 1.5rem;
    font-weight: 600;
}

/* Dashboard KPIs */
.dashboard-kpis {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.kpi-card {
    background: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.05);
    transition: transform 0.3s, box-shadow 0.3s;
    border-left: 4px solid #4e4376;
}

.kpi-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px rgba(0,0,0,0.1);
}

.kpi-card h6 {
    font-size: 0.875rem;
    color: #666;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.kpi-card h2 {
    font-size: 2rem;
    color: #2b5876;
    margin: 0;
}

/* Grupos de botones */
.button-group {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    margin: 2rem 0;
}

.download-btn, .upload-btn, .google-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.download-btn {
    background: linear-gradient(to right, #4e4376, #3a3560);
    color: white;
}

.upload-btn {
    background: linear-gradient(to right, #2b5876, #1a4560);
    color: white;
}

.google-btn {
    background: linear-gradient(to right, #DB4437, #C53929);
    color: white;
}

.download-btn:hover, .upload-btn:hover, .google-btn:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    box-shadow: 0 5px 10px rgba(0,0,0,0.1);
}

.generate-btn {
    background: linear-gradient(to right, #4e4376, #2b5876);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    margin: 1rem auto;
    display: block;
    max-width: 300px;
    transition: all 0.3s;
}

.generate-btn:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

/* Modal */
.modal {
    display:
